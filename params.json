{"name":"ko-filteredOptions","tagline":"A custom Knockout binding based on the 'options' binding: it allows to filter certain items of a bound collection, keeping them from being attached to the <select> control.","body":"## Introduction\r\nThis is a quite simple custom Knockout binding that I implemented due to a particular need I had with the project my colleague @codecoding and I were working on at the time.\r\n\r\nWe had a series of selection controls the sources of which would be retrieved from server on page load through AJAX requests, and then populated through the use of observable arrays and the _options_ binding. These controls were part of a form that was, in turn, also data-bound to a viewmodel.\r\n\r\nFor some reason we needed that, at some point, some of the options in our selection controls could be hidden, filtered out, so that they could not be selected. Removing these options from their respective observable arrays was not an acceptable solution: our data sources had to remain unchanged. Since these \"particular options\" had to be filtered according to a certain property's value in our form's data-bound viewmodel, we came up with the idea for our own custom _options_ binding.\r\n\r\n## So, what does it do?\r\nIt's probably easier to understand with an example so here it goes. We define to viewmodels, _Guest_ and _Meal_.\r\n```javascript\r\nfunction Guest (name, isVegan) {\t\r\n  this.Name = ko.observable(name ? name : '');\r\n  this.IsVegan = ko.observable(isVegan ? isVegan : false);\r\n  this.SelectedMeal = ko.observable();\r\n}\r\n\r\nfunction Meal (name, isApt) {\r\n  this.Id = ko.observable();\r\n  this.Name = ko.observable(name ? name : '');\r\n  this.IsAptForVegans = ko.observable(isApt ? isApt : false);\r\n}\r\n```\r\nAs you can see, when instantiating a _Guest_ we must specify the guest's name and whether he/she is vegan or not. In turn, when instantiating a _Meal_ we must specify its name and whether it is apt for vegans or not. Next we define a collection of _Guests_ and a collection of _Meals_. \r\n```javascript\r\nthis.Guests = ko.observableArray([\r\n  new Guest('Ernie', false),\r\n  new Guest('Bert', false),\r\n  new Guest('Cookie monster', true)\t\t\r\n]);\r\n\t\r\nthis.Meals = ko.observableArray([\r\n  new Meal('Pepperoni pizza', false),\r\n  new Meal('Chicken fingers', false),\r\n  new Meal('Chocolate cookies', true),\r\n  new Meal('Cheese burger', false),\r\n  new Meal('Fruit salad', true)\r\n]);\r\n```\r\nNow, as you may have already imagined, our intention is to pair each _Guest_ with a _Meal_. The collection of meals available to each guest will be filtered according to whether or not the _Guest_'s property _IsVegan_ is set to true. Head to [this fiddle](http://jsfiddle.net/pchiwan/c55g2/4/) to see it working. Here's the snippet of html code where you can see the our custom data binding _filteredOptions_.\r\n```html\r\n<!-- ko foreach: { data: Guests(), as: 'guest' } -->\r\n<div class=\"guest\">\r\n  <div class=\"left\">\r\n    <b>Guest: </b><span data-bind=\"text: guest.Name\"></span><br>\r\n    <b>Is vegan? </b><input type=\"checkbox\" data-bind=\"checked: guest.IsVegan\"></input>\r\n  </div>\r\n  <div class=\"right\">\r\n    <span><b>Meal of choice:</b></span><br>\r\n    <select data-bind=\"filteredOptions: $root.Meals, optionsFiltering: { propertyName: 'IsAptForVegans', propertyValue: !guest.IsVegan() }, optionsValue: 'Id', optionsText: 'Name', optionsCaption: 'Choose a meal', value: guest.SelectedMeal\"></select>\r\n  </div>\r\n</div>\r\n<!-- /ko -->\r\n```\r\n## How does it work?\r\nBasically I copied the code of the original _options_ binding and enhanced it by adding the tiny snippet of logic that does our magic trick. The only drawback is that, in order for it all to work, we also had to copy some Knockout's private utility methods in order to expose them (because they are not exposed in the production version).\r\n## And how do I use it?\r\nYou must use the _filteredOptions_ data binding instead of the original _options_ binding. So the binding's parameters are the same, but we've added a few more.\r\n* **propertyName**:\r\n* **propertyValue**:\r\n* **exceptionValue**:","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}